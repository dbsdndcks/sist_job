/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-06-22 10:13:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.asd.admin.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.google.gson.Gson;
import java.text.ParseException;
import java.util.Date;
import java.text.SimpleDateFormat;
import admin.AdminMovieDAO;
import VO.AdminMovieVO;
import admin.ScreeningDAO1;
import java.sql.SQLException;
import admin.ScreeningVO;
import java.util.List;

public final class edit_005fmovie_005fservice_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("admin.ScreeningDAO1");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("admin.ScreeningVO");
    _jspx_imports_classes.add("admin.AdminMovieDAO");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("VO.AdminMovieVO");
    _jspx_imports_classes.add("java.text.ParseException");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
	
    // 요청으로부터 받은 파라미터 가져오기
    String action = request.getParameter("action");
    
    if ("update".equals(action)) {
        // 업데이트 요청 처리
        System.out.println("edit_movie_service의 action:update 실행됨");
        String movieCode = request.getParameter("movieCode");
        String movieGenre = request.getParameter("movieGenre");
        String movieDirector = request.getParameter("movieDirector");
        String movieMainActor = request.getParameter("movieMainActor");
        String movieSubActor = request.getParameter("movieSubActor");
        String movieReleaseDateStr = request.getParameter("movieReleaseDate");
        String movieRating = request.getParameter("movieRating");
        String movieDistributor = request.getParameter("movieDistributor");
        String movieRunningTime = request.getParameter("movieRunningTime");
        String movieDescription = request.getParameter("movieDescription");
        String moviePosterPath = request.getParameter("moviePosterPath");
        String movieScreeningStatus = request.getParameter("movieScreeningStatus");
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date editMovieReleaseDate = null;
        
        try {
        	editMovieReleaseDate = new java.sql.Date(dateFormat.parse(movieReleaseDateStr).getTime());
        } catch (ParseException e) {
            e.printStackTrace();
        }
        Date currentDate = new Date();
        // ScreeningDAO1 객체 생성
        AdminMovieDAO movieDAO = AdminMovieDAO.getInstance();
        
        // ScreeningVO 객체 생성하여 업데이트할 정보 설정
        AdminMovieVO resultMovieVO = AdminMovieVO.builder()
        		.movieCode(movieCode)
                .movieGenre(movieGenre)
                .movieDirector(movieDirector)
                .movieMainActor(movieMainActor)
                .movieSubActor(movieSubActor)
                .movieReleaseDate(editMovieReleaseDate)
                .movieRating(movieRating)
                .movieDistributor(movieDistributor)
                .movieRunningTime(movieRunningTime)
                .movieDescription(movieDescription)
                .moviePosterPath(moviePosterPath)
                .movieScreeningStatus(movieScreeningStatus)
                .build();

        try {
            // 상영 정보 업데이트
            movieDAO.updateMovie(resultMovieVO);

            // 등록이 성공했음을 JSON 형식으로 응답으로 전송
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write("{\"result\": \"success\"}");
        } catch (SQLException e) {
            // 등록에 실패했을 경우 JSON 형식으로 에러 응답 전송
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write("{\"result\": \"fail\", \"error\": \"" + e.getMessage() + "\"}");
            e.printStackTrace();
        }
    } else if("table".equals(action)){
        // 해당 영화 코드로 영화 정보를 가져와서 JSON 형식으로 응답
        String tableMovieCode = request.getParameter("tableMovieCode");
        // AdminMovieDAO 객체 생성
        AdminMovieDAO movieDAO = AdminMovieDAO.getInstance();
        
        try {
            // 해당 영화 코드로 영화 정보 가져오기
            AdminMovieVO movieVO = movieDAO.getMovieByCode(tableMovieCode);
            // JSON 형식으로 응답을 준비
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            
            // 영화 정보를 JSON 형식으로 변환하여 응답
            response.getWriter().write(new Gson().toJson(movieVO));
        } catch (SQLException e) {
            // 에러가 발생한 경우 JSON 형식으로 에러 응답 전송
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write("{\"result\": \"fail\", \"error\": \"" + e.getMessage() + "\"}");
            e.printStackTrace();
        }
    } else {
        // 잘못된 요청일 경우 에러 응답 전송
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        response.getWriter().write("{\"result\": \"fail\", \"error\": \"Invalid action\"}");
    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
